{"version":3,"sources":["webpack:///./getGeoPosition.js","webpack:///./fetchWeather.js","webpack:///./index.js"],"names":["options","fetchWeather","coordinates","Promise","resolve","reject","fetch","then","response","console","log","json","resp","error","info","weatherSection","document","querySelector","cityForm","cityName","weatherIcon","locationValue","tempValue","humidityValue","windValue","conditionsValue","renderWeather","weatherData","classList","remove","setAttribute","current","weather_icons","weather_descriptions","innerHTML","location","name","region","country","temperature","humidity","wind_speed","wind_dir","hideWaetherSection","add","maximumAge","enableHighAccuracy","window","onload","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","data","catch","PNotify","alert","addEventListener","e","preventDefault","value"],"mappings":"qKAGQA,ECDOC,EAAA,SAASC,GAMtB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAAK,yFACmEJ,GACtEK,KAAK,SAAAC,GACLC,QAAQC,MACRF,EAASG,OAAOJ,KAAK,SAAAK,GACdA,EAAKC,MAERR,EAAOO,EAAKC,MAAMC,MAFHV,EAAQQ,sBCN3BG,EAAiBC,SAASC,cAAc,YACxCC,EAAWF,SAASC,cAAc,gBAClCE,EAAWH,SAASC,cAAc,iBAElCG,EAAcJ,SAASC,cAAc,SACrCI,EAAgBL,SAASC,cAAc,yBACvCK,EAAYN,SAASC,cAAc,qBACnCM,EAAgBP,SAASC,cAAc,yBACvCO,EAAYR,SAASC,cAAc,qBACnCQ,EAAkBT,SAASC,cAAc,2BAI/C,SAASS,EAAcC,GACrBZ,EAAea,UAAUC,OAAO,aAChCT,EAAYU,aAAa,MAAOH,EAAYI,QAAQC,cAAc,IAClEZ,EAAYU,aAAa,MAAOH,EAAYI,QAAQE,qBAAqB,IACzEZ,EAAca,UAAeP,EAAYQ,SAASC,KAAlD,KAA2DT,EAAYQ,SAASE,OAAhF,KAA2FV,EAAYQ,SAASG,QAChHhB,EAAUY,UAAYP,EAAYI,QAAQQ,YAC1ChB,EAAcW,UAAYP,EAAYI,QAAQS,SAC9ChB,EAAUU,UAAeP,EAAYI,QAAQU,WAA7C,SAAgEd,EAAYI,QAAQW,SACpFjB,EAAgBS,UAAYP,EAAYI,QAAQE,qBAAqB,GAGvE,SAASU,IACP5B,EAAea,UAAUgB,IAAI,cF9BvB5C,EAAU,CACd6C,WAAY,KACZC,oBAAoB,GAEf,IAAI3C,QAAQ,SAACC,EAASC,GAC3B0C,OAAOC,OAAS,WAUdC,UAAUC,YAAYC,mBATL,SAASC,GACxBhD,EAAQgD,EAASC,SAEJ,WACbhD,EACE,sEAI2DL,OEmBlEO,KAAK,SAAA6C,GACJnD,EAAY,IAAKmD,EAASE,SAAd,KAA2BF,EAASG,WAAahD,KAAK,SAAAiD,GAChE9B,EAAc8B,OAGjBC,MAAM,SAAA5C,GACL6C,IAAQC,MAAM9C,GACd8B,MAGJzB,EAAS0C,iBAAiB,SAAU,SAAAC,GAClCA,EAAEC,iBACF7D,EAAakB,EAAS4C,OACnBxD,KAAK,SAAAiD,GACJ9B,EAAc8B,KAEfC,MAAM,SAAA5C,GACL6C,IAAQC,MAAM9C,GACd8B","file":"main.b01ec95543b1f8a2e8bb.js","sourcesContent":["'use strict';\r\n\r\nexport default function() {\r\n  const options = {\r\n    maximumAge: 1800000,\r\n    enableHighAccuracy: true,\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    window.onload = function() {\r\n      let geoSuccess = function(position) {\r\n        resolve(position.coords);\r\n      };\r\n      let geoError = function() {\r\n        reject(\r\n          'Нет прав доступа к геопозиции, используйте поиск по имени города.',\r\n        );\r\n      };\r\n\r\n      navigator.geolocation.getCurrentPosition(geoSuccess, geoError, options);\r\n    };\r\n  });\r\n}\r\n","'use strict';\r\n\r\nexport default function(coordinates) {\r\n  // Location Name\tquery = New York\tThe standard way of passing a location name to the API.\r\n  // Coordinates (Lat/Lon)\tquery = 40.7831,-73.9712\r\n\r\n  const ACCESS_KEY = '02a147ec3a44e145b334fac4a63397f3';\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\r\n      `http://api.weatherstack.com/current?access_key=${ACCESS_KEY}&query=${coordinates}`,\r\n    ).then(response => {\r\n      console.log();\r\n      response.json().then(resp => {\r\n        if (!resp.error) resolve(resp);\r\n        else {\r\n          reject(resp.error.info);\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n","'use strict';\r\n\r\nimport './styles.css';\r\nimport getGeoPosition from './getGeoPosition';\r\nimport fetchWeather from './fetchWeather';\r\n\r\nimport PNotify from '../node_modules/pnotify/dist/es/PNotify.js';\r\n\r\nconst weatherSection = document.querySelector('#weather');\r\nconst cityForm = document.querySelector('#search-form');\r\nconst cityName = document.querySelector('[name=\"city\"]');\r\n\r\nconst weatherIcon = document.querySelector('.icon');\r\nconst locationValue = document.querySelector('[data-field=location]');\r\nconst tempValue = document.querySelector('[data-field=temp]');\r\nconst humidityValue = document.querySelector('[data-field=humidity]');\r\nconst windValue = document.querySelector('[data-field=wind]');\r\nconst conditionsValue = document.querySelector('[data-field=conditions]');\r\n\r\n// console.log(locationValue.innerHTML);\r\n\r\nfunction renderWeather(weatherData) {\r\n  weatherSection.classList.remove('is-hidden');\r\n  weatherIcon.setAttribute('src', weatherData.current.weather_icons[0]);\r\n  weatherIcon.setAttribute('alt', weatherData.current.weather_descriptions[0]);\r\n  locationValue.innerHTML = `${weatherData.location.name}, ${weatherData.location.region}, ${weatherData.location.country}`;\r\n  tempValue.innerHTML = weatherData.current.temperature;\r\n  humidityValue.innerHTML = weatherData.current.humidity;\r\n  windValue.innerHTML = `${weatherData.current.wind_speed} kph, ${weatherData.current.wind_dir}`;\r\n  conditionsValue.innerHTML = weatherData.current.weather_descriptions[0];\r\n}\r\n\r\nfunction hideWaetherSection() {\r\n  weatherSection.classList.add('is-hidden');\r\n}\r\n\r\ngetGeoPosition()\r\n  .then(position => {\r\n    fetchWeather(` ${position.latitude}, ${position.longitude}`).then(data => {\r\n      renderWeather(data);\r\n    });\r\n  })\r\n  .catch(error => {\r\n    PNotify.alert(error);\r\n    hideWaetherSection();\r\n  });\r\n\r\ncityForm.addEventListener('submit', e => {\r\n  e.preventDefault();\r\n  fetchWeather(cityName.value)\r\n    .then(data => {\r\n      renderWeather(data);\r\n    })\r\n    .catch(error => {\r\n      PNotify.alert(error);\r\n      hideWaetherSection();\r\n    });\r\n});\r\n"],"sourceRoot":""}